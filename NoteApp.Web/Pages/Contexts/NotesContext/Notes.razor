@page "/notes"
@using MediatR
@using NoteApp.Domain.Contexts.NoteContext.Entities
@using NoteApp.Web.Services
@using NoteApp.Web.Components.Contexts.NotesContext
@layout NotesLayout
@inject IStorageService StorageService
@inject NavigationManager NavigationManager
@inject IRequestHandler<
    NoteApp.Web.Contexts.NoteContext.UseCases.GetAll.Request, 
    NoteApp.Domain.Contexts.NoteContext.UseCases.GetAll.Response> HandleGetAllRequest
@inject IRequestHandler<
    NoteApp.Web.Contexts.NoteContext.UseCases.Create.Request,
    NoteApp.Domain.Contexts.NoteContext.UseCases.Create.Response> HandleCreateRequest


<MudAppBar Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
    <MudSpacer />
    <MudAvatar Color="Color.Primary">M</MudAvatar>
</MudAppBar>
<MudDrawer @bind-Open="@_open" Width="350px" ClipMode="_clipMode" Elevation="1" Variant="@DrawerVariant.Responsive">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">My App</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <CascadingValue Value="@Token">
            <div class="search-note">
                <MudTextField
                    @bind-Value="@Token"
                    Variant="Variant.Outlined"
                    Margin="Margin.Dense"
                    Adornment="Adornment.End"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    AdornmentColor="Color.Primary"
                    OnAdornmentClick="ToggleDrawer">
                </MudTextField>
            </div>
            <div class="create-note">
                <h5>Notas</h5>
                <MudIconButton @onclick="CreateNote" Size="Size.Small" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Add" Color="Color.Success"></MudIconButton>
            </div>
            <NoteCard OnDataSend="HandleData" Notes="_notes"/>
        </CascadingValue>
    </MudNavMenu>
</MudDrawer>
<MudMainContent Class="pt-16 px-16">
    <MudContainer Class="mt-6">
        <input type="text" value="@ReceivedNote.Title"/>
        <input type="text" value="@ReceivedNote.Body"/>
    </MudContainer>
</MudMainContent>

@code {
    private string Token;
    private bool _open = false;
    private DrawerClipMode _clipMode = DrawerClipMode.Never;
    private List<Note> _notes = [];
    private Note? ReceivedNote = new Note("","", new Guid());
    
    protected override async Task OnInitializedAsync()
    {
        Token = await StorageService.GetItemAsync("jwtToken");
        if (Token is null or FilterOperator.String.Empty)
        {
            NavigationManager.NavigateTo("/");
        }

        try
        {
            var request = new NoteApp.Web.Contexts.NoteContext.UseCases.GetAll.Request
            {
                Token = this.Token,
            };
            
            var response = await HandleGetAllRequest.Handle(request, new CancellationToken());
            
            if (response.IsSuccess)
            {
                _notes = response.Data.Notes;
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
            
        }
        catch (Exception e)
        {
            // NavigationManager.NavigateTo("/");
            Console.WriteLine($"debug: {e}");
        }
    }
    
    private void ToggleDrawer()
    {
        _open = !_open;
    }
    
    private void HandleData(Note data)
    {
        ReceivedNote = data;
    }

    private async void CreateNote()
    {
        var createRequest = new NoteApp.Web.Contexts.NoteContext.UseCases.Create.Request
        {
            Title = "nota mais recente!",
            Body = "Conte√∫do",
            Token = Token
        };
        var response = await HandleCreateRequest.Handle(createRequest, new CancellationToken());
    
        if (response.IsSuccess)
        {
            var getAllRequest = new NoteApp.Web.Contexts.NoteContext.UseCases.GetAll.Request
            {
                Token = this.Token,
            };
            var result = await HandleGetAllRequest.Handle(getAllRequest, new CancellationToken());
    
            _notes = result.Data.Notes;
            StateHasChanged();
        }
        
    }
}