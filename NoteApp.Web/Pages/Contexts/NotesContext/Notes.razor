@page "/notes"
@using MediatR
@using NoteApp.Domain.Contexts.NoteContext.Entities
@using NoteApp.Domain.Contexts.NoteContext.UseCases.GetAll
@using NoteApp.Web.Services
@using NoteApp.Web.Components.Contexts.NotesContext
@using Request = NoteApp.Web.Contexts.NoteContext.UseCases.GetAll.Request
@layout NotesLayout
@inject IStorageService StorageService
@inject NavigationManager NavigationManager
@inject IRequestHandler<Request, Response> HandleRequest
@inject AppState AppState

<MudAppBar Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
    <MudSpacer />
    <MudAvatar Color="Color.Primary">M</MudAvatar>
</MudAppBar>
<MudDrawer @bind-Open="@_open" Width="350px" ClipMode="_clipMode" Elevation="1" Variant="@DrawerVariant.Responsive">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">My App</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <CascadingValue Value="@Token">
            <NoteCard OnDataSend="HandleData" Notes="_notes"/>
        </CascadingValue>
    </MudNavMenu>
</MudDrawer>
<MudMainContent Class="pt-16 px-16">
    <MudContainer Class="mt-6">
        <input type="text" value="@ReceivedNote.Title"/>
        <input type="text" value="@ReceivedNote.Body"/>
    </MudContainer>
</MudMainContent>

@code {
    private string Token;
    private bool _open = false;
    private DrawerClipMode _clipMode = DrawerClipMode.Never;
    private List<Note> _notes = [];
    private Note? ReceivedNote = new Note("","", new Guid());
    
    protected override async Task OnInitializedAsync()
    {
        Token = await StorageService.GetItemAsync("jwtToken");
        if (Token is null or FilterOperator.String.Empty)
        {
            NavigationManager.NavigateTo("/");
        }

        try
        {
            var request = new Request
            {
                Token = this.Token,
                PageNumber = 1,
                PageSize = 10
            };
            
            var response = await HandleRequest.Handle(request, new CancellationToken());
            
            if (response.IsSuccess)
            {
                _notes = response.Data?.Notes;
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
            
        }
        catch (Exception e)
        {
            // NavigationManager.NavigateTo("/");
            Console.WriteLine($"debug: {e}");
        }
    }
    
    private void ToggleDrawer()
    {
        _open = !_open;
    }
    
    private void HandleData(Note data)
    {
        ReceivedNote = data;
    }
}