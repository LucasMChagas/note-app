@page "/notes"
@using MediatR
@using NoteApp.Domain.Contexts.NoteContext.UseCases.GetAll
@using NoteApp.Web.Services
@using NoteApp.Web.Components.Contexts.NotesContext
@using Request = NoteApp.Web.Contexts.NoteContext.UseCases.GetAll.Request
@layout NotesLayout
@inject IStorageService StorageService
@inject NavigationManager NavigationManager
@inject IRequestHandler<Request, Response> HandleRequest

<MudAppBar Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
    <MudSpacer />
    <MudAvatar Color="Color.Primary">M</MudAvatar>
</MudAppBar>
<MudDrawer @bind-Open="@_open" Width="350px" ClipMode="_clipMode" Elevation="1" Variant="@DrawerVariant.Responsive">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">My App</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
            <NoteCard Interations="5"/>
    </MudNavMenu>
</MudDrawer>
<MudMainContent Class="pt-16 px-16">
    <MudContainer Class="mt-6">
       
    </MudContainer>
</MudMainContent>

@code {
    private string Token;
    private bool _open = false;
    private DrawerClipMode _clipMode = DrawerClipMode.Never;
    
    protected override async Task OnInitializedAsync()
    {
        Token = await StorageService.GetItemAsync("jwtToken");
        if (Token is null or FilterOperator.String.Empty)
        {
            NavigationManager.NavigateTo("/");
        }

        try
        {
            var request = new Request(Token);
            request.PageNumber = 1;
            request.PageSize = 5;
            Console.WriteLine($"{request.PageNumber},{request.PageSize}, {request.Token}");
            var response = await HandleRequest.Handle(request, new CancellationToken());
            Console.WriteLine($"Response is : {response}");
            Console.WriteLine($"verificação {response.IsSuccess}");
        }
        catch (Exception e)
        {
            // NavigationManager.NavigateTo("/");
            Console.WriteLine($"debug: {e}");
            throw;
        }
        
    }
    
    private void ToggleDrawer()
    {
        _open = !_open;
    }
}