@using MediatR
@using MudBlazor.Utilities
@using NoteApp.Domain.Contexts.NoteContext.Entities
@using NoteApp.Domain.Contexts.NoteContext.UseCases.Delete
@using NoteApp.Web.Components.SharedContext
@using Request = NoteApp.Web.Contexts.NoteContext.UseCases.Delete.Request
@inject IDialogService DialogService
@inject IRequestHandler<Request, Response> HandlerRequest
@for (int i = 0; i < Notes.Count && Notes != null; i++)
{
    var index = i;
    <div class="@GetClass(index)" @onclick="() => { ToggleDiv(index); SendData(Notes[index]); }">
        <div class="note-content">
            <h2 class="note-title">@((MarkupString)Notes[index].Title)</h2>
            <p class="note-summary">@(Notes[index].Body.Length >= 90 ? (MarkupString)Notes[index].Body.Substring(0, 90).Insert(90, "...") : (MarkupString)Notes[index].Body)</p>
            <div class="note-options">
                <MudChip Text="purple" Color="@Color.Primary" Label="true" Size="Size.Small" Value="@Color.Primary">@Notes[index].CreatedAt.ToString("dd/MM/yy")</MudChip>
                <MudIconButton @onclick="() => DeleteNote(Notes[index].Id)" Size="Size.Small" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudIconButton>
            </div>
        </div>
    </div>
}


@code {

    [Parameter] 
    public List<Note> Notes { get; set; } = [];
    [Parameter] 
    public EventCallback<Note> OnDataSend { get; set; }
    [Parameter] 
    public EventCallback<int> SetAmountNotes { get; set; }
    [CascadingParameter]
    public string Token { get; set; }    
    private List<bool> _activeDivs;
    
    private void ToggleDiv(int index)
    {
        for (int i = 0; i < _activeDivs.Count; i++)
        {
            _activeDivs[i] = false;
        } 
        _activeDivs[index] = true;
    }

    private string GetClass(int index)
    {
        return _activeDivs[index] ? "note-card is-active" : "note-card";
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (Notes != null && ( _activeDivs == null || _activeDivs.Count != Notes.Count))
        {
            _activeDivs = Enumerable.Repeat(false, Notes.Count).ToList();
            Console.WriteLine($"_activeDivs inicializado em OnParametersSetAsync com {Notes.Count} itens.");
        }
    }
    private async void SendData(Note note)
    {
        await OnDataSend.InvokeAsync(note);
    }

    private async Task DeleteNote(Guid id)
    {
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { x => x.ContentText, "VocÃª tem certeza que deseja excluir essa nota?" },
            { x => x.ButtonText, "Sim" },
            { x => x.Color, Color.Success }
        }; 
        
        var dialogResult = await DialogService.Show<ConfirmDialog>("Confirm", parameters).Result;
        
        if (!dialogResult.Canceled) 
        { 
            var request = new Request
            {
                NoteId = id,
                Token = this.Token
            };
            HandlerRequest.Handle(request, new CancellationToken());
            var note = Notes.FirstOrDefault(x => x.Id == id);
            Notes.Remove(note);
            SetAmountNotes.InvokeAsync(Notes.Count);
        }
    }
}