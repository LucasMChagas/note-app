@using MudBlazor.Utilities
@using NoteApp.Domain.Contexts.NoteContext.Entities
@for (int i = 0; i < Notes.Count; i++)
{
    var index = i;
    <div class="@GetClass(index)" @onclick="() => ToggleDiv(index)">
        <div class="note-content">
            <h2 class="note-title">@Notes[i].Title</h2>
            <p class="note-summary">@Notes[i].Body.Substring(0,90).Insert(90,"...")</p>
            <div class="note-options">
                <MudChip Text="purple" Color="@Color.Primary" Label="true" Size="Size.Small" Value="@Color.Primary">@DateTime.Now.Date.ToString("dd/MM/yy")</MudChip>
                <MudIconButton Size="Size.Small" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudIconButton>
            </div>
        </div>
    </div>
}


@code {

    [Parameter] public List<Note> Notes { get; set; } = [];

    private List<bool> _activeDivs;

    private void ToggleDiv(int index)
    {
        for (int i = 0; i < _activeDivs.Count; i++)
        {
            _activeDivs[i] = false;
        } 
        _activeDivs[index] = true;
    }

    private string GetClass(int index)
    {
        return _activeDivs[index] ? "note-card is-active" : "note-card";
    }

    protected override void OnInitialized()
    {
        
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (Notes != null && ( _activeDivs == null || _activeDivs.Count != Notes.Count))
        {
            _activeDivs = Enumerable.Repeat(false, Notes.Count).ToList();
            Console.WriteLine($"_activeDivs inicializado em OnParametersSetAsync com {Notes.Count} itens.");
        }
    }
}